#!/usr/bin/python
################################################################################
# Main driver for exterior lights.  Uses 0MQ for communication from web server
# in the /opt/lightshow/lighthouse django web app.
#
# This runs a thread that is the current show while the master listens for zero
# MQ requests to provide data and change the shows.
################################################################################
from animate import Animate, runshow
import time
import signal
import simplejson as json
import sys
import threading
import argparse
import zmq
import logging
import os

basedir = '/opt/lightshow'
inifile = basedir + '/etc/lightshow.json'
pidfile = basedir + '/run/lightshow.pid'
logfile = basedir + '/log/lightshow.log'
loglevel = logging.INFO
loglevel = logging.DEBUG

#Initialize anim object
anim = Animate(inifile)
animthread = None

def signal_handler(signal, frame):
  global pidfile
  logging.info("Shutting Down")
  if animthread:
    animthread.running = False
    animthread.join()
  runshow(anim,"Solid")
  print "Exiting"
  try:
    os.remove(pidfile)
  except OSError:
    pass
  sock.close()
  sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

##### Set up logging
logging.basicConfig(filename=logfile,level=loglevel,format='%(asctime)s %(levelname)-8s %(message)s')

##### Create pid file
pid = os.getpid()
with open(pidfile, 'w') as pidfile:
  pidfile.write(str(pid))
  pidfile.close()

##### Set up zeromq queue
context = zmq.Context()
sock = context.socket(zmq.REP)
sock.bind("tcp://127.0.0.1:5678")

#parser = argparse.ArgumentParser(description='zeromq server/client')
#parser.add_argument('--bar')
#args = parser.parse_args()

logging.info("Lightshow started.")

def getColorNames(socket):
  colorarray = anim.getcolornames()
  try:
    socket.send(json.dumps(colorarray))
  except e:
    logging.error("Error sending color array to socket: " + e)

def setShow(socket,showname,argtup):
  global animthread
  logging.info("Setting show to " + showname)
  #Exit current thread
  if animthread:
    animthread.running = False
    animthread.join()
  animthread = runshow(anim,showname,argtup)
  if animthread:
    result = {"result": "success", "msg": "OK"}
  else:
    result = {"result": "error", "msg": "Unable to star show " + showname}
  try:
    socket.send(json.dumps(result))
  except e:
    logging.error("Error sending show result to socket: " + e)

def getShows(socket):
  showarray = anim.getshows()
  try:
    socket.send(json.dumps(showarray))
  except e:
    logging.error("Error sending show array to socket: " + e)
  
def getShow(socket,sname):
  show = anim.getshow(sname)
  if show == None:
    show = {"error":"Show not found"}
  try:
    socket.send(json.dumps(show))
  except e:
    logging.error("Error sending show object to socket: " + e)
  
def getCurrentShow(socket):
  show = anim.getcurrentshow()
  try:
    socket.send(json.dumps(show))
  except e:
    logging.error("Error sending show to socket: " + e)

def sendError(msg):
  respdata = {"response":"Error","msg": msg}
  try:
    sock.send(json.dumps(respdata))
  except zmq.ZMQError as e:
    logging.error("ZMQError " + str(e.errno) + " in sendError")
  except Exception as e:
    logging.error("Error sending response to socket: " + e)

def handleRequest():
  try:
    req = sock.recv_json(flags=zmq.NOBLOCK)
    logging.debug("Received: " + json.dumps(req))
    if req["action"] == "getshows":
      getShows(sock)
    if req["action"] == "getshow":
      getShow(sock,req["showname"])
    elif req["action"] == "setshow":
      setShow(sock,req["showname"],req["showargs"])
    elif req["action"] == "getcurrentshow":
      getCurrentShow(sock)
    elif req["action"] == "getcolornames":
      getColorNames(sock)
    else:
      sendError("Unknown action " + req["action"])
  except TypeError as e:
    sendError("TypeError")
  except zmq.Again:
    pass

def main():
  global animthread
  animthread = runshow(anim,"Current")
  while True:
    handleRequest()
    time.sleep(1)

if __name__ == '__main__':
  #opt_parse()
  main()

